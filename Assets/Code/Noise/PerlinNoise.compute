#pragma kernel CSMain

cbuffer NoiseSettings : register(b0)
{
    int Width;
    int Height;
    float Scale; 
    float OffsetX;
    float OffsetY;
    int Octaves;
    float Persistance;
    float Lacunarity;
    float Seed;
}

RWStructuredBuffer<float> Result;

float Lerp(float a, float b, float t)
{
    return a + t * (b - a);
}

float Fade(float t)
{
    return t * t * t * (t * (t * 6 - 15) + 10);
}

float2 gradient(float2 p, float seed)
{
    float angle = frac(sin(dot(p, float2(127.1, 311.7)) + seed) * 43758.5453) * 6.28318530718; // 2 * PI
    return float2(cos(angle), sin(angle));
}

float NormalizeNoiseValue(float value)
{
    return (value + 0.3) / 0.6;
}

float Random(float2 st)
{
    return frac(sin(dot(st.xy, float2(12.9898, 78.233))) * 43758.5453123);
}

float PerlinNoise(float2 p, float seed)
{
    float2 ip = floor(p);
    float2 fp = frac(p);

    float2 g00 = gradient(ip, seed);
    float2 g10 = gradient(ip + float2(1.0, 0.0), seed);
    float2 g01 = gradient(ip + float2(0.0, 1.0), seed);
    float2 g11 = gradient(ip + float2(1.0, 1.0), seed);
    
    float2 d00 = fp - float2(0.0, 0.0);
    float2 d10 = fp - float2(1.0, 0.0);
    float2 d01 = fp - float2(0.0, 1.0);
    float2 d11 = fp - float2(1.0, 1.0);
    
    float v00 = dot(g00, d00);
    float v10 = dot(g10, d10);
    float v01 = dot(g01, d01);
    float v11 = dot(g11, d11);
    
    float2 u = float2(Fade(fp.x), Fade(fp.y));

    return lerp(lerp(v00, v10, u.x), lerp(v01, v11, u.x), u.y);
}

float FractalNoise(float2 coord, int octaves)
{
    float noiseValue = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    
    float maxAmplitude = 0.0;
    
    for (int i = 0; i < octaves; i++)
    {
        noiseValue += PerlinNoise(coord * frequency, Seed) * amplitude;
        maxAmplitude += amplitude;
        
        amplitude *= Persistance; 
        frequency *= Lacunarity; 
    }
    
    noiseValue /= maxAmplitude;
    return NormalizeNoiseValue(noiseValue);
    return noiseValue;
    
}


[numthreads(8, 8, 1)]
void CSMain(uint3 DTid : SV_DispatchThreadID)
{
    if (DTid.x >= Width || DTid.y >= Height)
        return;

    float2 uv = float2(DTid.x, DTid.y) / float2(Width, Height);
    float2 noiseCoord = uv * Scale + float2(OffsetX, OffsetY);

    float noiseValue = FractalNoise(noiseCoord, Octaves);
    
    Result[DTid.y * Width + DTid.x] = noiseValue;
}
